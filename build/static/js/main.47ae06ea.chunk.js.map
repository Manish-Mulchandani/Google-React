{"version":3,"sources":["StateProvider.js","reducer.js","Search.js","Home.js","useGoogleSearch.js","keys.js","SearchPage.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","console","log","type","term","Search","hideButtons","dispatch","useState","input","setInput","history","useHistory","search","e","preventDefault","push","className","onChange","target","Button","onClick","variant","Home","to","Avatar","src","alt","useGoogleSearch","data","setData","useEffect","a","fetch","then","response","json","result","fetchData","SearchPage","searchInformation","formattedTotalResults","formattedSearchTime","items","map","item","href","link","pagemap","cse_image","length","displayLink","title","snippet","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47ae06ea.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\n\n//Preparing the DataLayer\nexport const StateContext = createContext();\n\n\nexport const StateProvider = ({ reducer, initialState, children}) => (\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </StateContext.Provider>\n);\n\n//Hook which allows us to pull information from the data layer\nexport const useStateValue = () => useContext(StateContext);","export const initialState = {\n    term: null,\n};\n\nexport const actionTypes = {\n    SET_SEARCH_TERM: \"SET_SEARCH_TERM\",\n};\n\nconst reducer = (state, action) => {\n    console.log(action);\n    switch (action.type) {\n        case actionTypes.SET_SEARCH_TERM:\n            return {\n                ...state,\n                term: action.term,\n\n            };\n            default:\n                return state;\n    }\n};\n\nexport default reducer;","import React, {useState} from 'react';\nimport \"./Search.css\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\n\n\n\n\nfunction Search({ hideButtons = false}) {\n    const [{}, dispatch] = useStateValue();\n    const [input, setInput] = useState(\"\");  /* Use StateHook */\n    const history = useHistory();\n\n    const search = (e) => {\n        e.preventDefault();\n\n        console.log('You hit the search button >> ', input)\n\n        dispatch({\n            type: actionTypes.SET_SEARCH_TERM,\n            term: input\n        })\n\n        // Do something with input...\n        history.push('/search')\n\n        //\n    };\n\n    return (\n        <form className=\"search\">              {/* Changed from div to form coz if i do Enter, it should Search */}\n            <div className=\"search_input\">\n                <SearchIcon className=\"search_inputIcon\" />\n                <input value={input} onChange={e => setInput(e.target.value)} />\n                <MicIcon />\n            </div>\n\n            {!hideButtons ? (\n                <div className=\"search_buttons\">\n                    <Button type='submit' onClick={search} variant=\"outlined\">Google Search</Button>    {/* For searching by pressing Enter, we used Button type submit and changed top div to form */}\n                    <Button variant=\"outlined\">I'm feeling Lucky</Button>\n                </div>\n            ): (\n                <div className=\"search_buttons\">\n                    <Button className=\"search_buttonsHidden\" type='submit' onClick={search} variant=\"outlined\">Google Search</Button>    {/* For searching by pressing Enter, we used Button type submit and changed top div to form */}\n                    <Button className=\"search_buttonsHidden\" variant=\"outlined\">I'm feeling Lucky</Button>\n                </div>\n            )}\n            \n        </form>\n    )\n}\n\nexport default Search;\n","import React from 'react';\nimport \"./Home.css\";\nimport { Link } from \"react-router-dom\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport { Avatar } from \"@material-ui/core\";\nimport Search from './Search';\n\nfunction Home() {\n    return (\n        <div className=\"home\">\n\n            <div className=\"home_header\">\n                <div className=\"home_headerLeft\">\n                    <Link to=\"/about\">About</Link>\n                    <Link to=\"/store\">Store</Link>\n\n                </div>\n                <div className=\"home_headerRight\">\n                <Link to=\"/gmail\">Gmail</Link>\n                <Link to=\"/images\">Images</Link>\n                <AppsIcon />\n                <Avatar />\n\n                    {/* Icon */}\n                    {/* Avatar */}\n                </div>\n\n            </div>\n\n            <div className=\"home_body\">\n                <img src=\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\" alt=\"Google-Img\" />\n\n                <div className=\"home_inputContainer\">\n                    <Search /> \n                </div>\n\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","import { useState, useEffect } from 'react';\nimport API_KEY from \"./keys\";\n\nconst CONTEXT_KEY = \"b791a368c055317c7\";\n\nconst useGoogleSearch = (term) => {\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async() => {\n            fetch(\n                `https://www.googleapis.com/customsearch/v1?key=${API_KEY}&cx=${CONTEXT_KEY}&q=${term}`\n            )\n            .then(response => response.json())\n            .then(result => {\n                setData(result)\n            })\n        }\n        fetchData();\n    }, [term])\n\n    return { data }\n\n\n};\nexport default useGoogleSearch;\n","export const API_KEY = \"AIzaSyCSv_GC8tVY75BTzm9igb_jjtTQAsgBZgo\";\n\nexport default API_KEY;","import React from 'react';\nimport './SearchPage.css';\nimport { useStateValue } from \"./StateProvider\";\nimport useGoogleSearch from \"./useGoogleSearch\"; \nimport Response from \"./response\";\nimport { Link } from \"react-router-dom\";\nimport Search from \"./Search\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport RoomIcon from \"@material-ui/icons/Room\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\n\n\nfunction SearchPage() {\n    const [{ term }, dispatch] = useStateValue();\n\n    // Live API call\n    const { data } = useGoogleSearch(term);\n\n    //MOCK API call\n    // const data = Response;\n\n    // // https://developers.google.com/custom-search/v1/using_rest\n\n    //https://cse.google.com/cse/create/new\n    //Time Template : 2:22:30 for full explanation\n\n    console.log(data)\n\n    return (\n        <div className='searchPage'>\n            <div className='searchPage_header'>\n                <Link to=\"/\">\n                    <img className=\"searchPage_logo\" src=\"https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_92x30dp.png\" alt=\"\" />\n                </Link>\n                <div className=\"searchPage_headerBody\">\n                    <Search hideButtons />\n\n                    <div className=\"searchPage_options\">\n                        <div className=\"searchPage_optionsLeft\">\n                            <div className=\"searchPage_option\">\n                                <SearchIcon />\n                                <Link to=\"/all\">All</Link>\n                            </div>\n                            <div className=\"searchPage_option\">\n                                <DescriptionIcon />\n                                <Link to=\"/news\">News</Link>\n                            </div>\n                            <div className=\"searchPage_option\">\n                                <ImageIcon />\n                                <Link to=\"/images\">Images</Link>\n                            </div>\n                            <div className=\"searchPage_option\">\n                                <LocalOfferIcon />\n                                <Link to=\"/shopping\">Shopping</Link>\n                            </div>\n                            <div className=\"searchPage_option\">\n                                <RoomIcon />\n                                <Link to=\"/maps\">maps</Link>\n                            </div>\n                            <div className=\"searchPage_option\">\n                                <MoreVertIcon />\n                                <Link to=\"/more\">more</Link>\n                            </div>\n                        </div>\n\n                        <div className=\"searchPage_optionsRight\">\n                            <div className=\"searchPage_option\">\n                                <Link to=\"/settings\">Settings</Link>\n                            </div>\n                            <div className=\"searchPage_option\">\n                                <Link to=\"/tools\">Tools</Link>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n            </div>\n            {term && (\n                <div className=\"searchPage_results\">\n                    <p className=\"searchPage_resultCount\"> About {data?.searchInformation.formattedTotalResults} results ({data?.searchInformation.formattedSearchTime} seconds) for {term} </p>\n\n                    {data?.items.map(item => (\n                        <div className=\"searchPage_result\">\n                            <a href={item.link} >\n                                {item.pagemap?.cse_image?.length>0 && item.pagemap?.cse_image[0]?.src && (\n                                    <img className=\"searchPage_resultImage\" src={item.pagemap?.cse_image[0]?.src} alt=\"\" />\n                                )}\n                                {item.displayLink} ▼\n                            </a>\n                            <a className=\"searchPage_resultTitle\" href={item.link}>\n                                <h2>{item.title}</h2>\n                            </a>\n                            <p className=\"searchPage_resultSnippet\">{item.snippet}</p>\n                        </div>\n                    ))}\n                </div>\n            )}\n            <div className=\"searchPage_results\">\n\n            </div>\n        </div>\n    )\n}\n\nexport default SearchPage\n","import React from 'react';\nimport './App.css';\nimport Home from \"./Home\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Search from './Search';\nimport SearchPage from \"./SearchPage\";\n\nfunction App() {\n  return (\n    //BEM\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route path = \"/search\">\n            <SearchPage />\n          </Route>\n          <Route path = \"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n\n      \n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>   {/* Making the Data Layer */}\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}